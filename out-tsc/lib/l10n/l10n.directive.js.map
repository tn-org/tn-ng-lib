{"version":3,"file":"l10n.directive.js","sourceRoot":"","sources":["../../../src/l10n/l10n.directive.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,GAIN,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAMtC,IAAM,aAAa,GAAnB,MAAM,aAAa;IAMJ;IAAwB;IAL7B,MAAM,GAAkC,EAAE,CAAC;IAElD,YAAY,GAAW,EAAE,CAAC;IAC1B,GAAG,CAA2B;IAEtC,YAAoB,EAAc,EAAU,IAAiB;QAAzC,OAAE,GAAF,EAAE,CAAY;QAAU,SAAI,GAAJ,IAAI,CAAa;IAAG,CAAC;IAEjE,QAAQ;QACN,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9C,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe;QACb,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACrE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,UAAU;QAChB,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,cAAc;YAAE,OAAO;QAE5B,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC/C,cAAc,EACd,IAAI,CAAC,MAAM,CACZ,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,GAAG,EAAE,WAAW,EAAE,CAAC;IAC1B,CAAC;CACF,CAAA;AA/BgB;IAAd,KAAK,CAAC,MAAM,CAAC;;6CAA4C;AAD/C,aAAa;IAHzB,SAAS,CAAC;QACT,QAAQ,EAAE,QAAQ;KACnB,CAAC;qCAOwB,UAAU,EAAgB,WAAW;GANlD,aAAa,CAgCzB","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport { L10nService } from './l10n.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[l10n]',\n})\nexport class L10nDirective implements OnInit, OnDestroy, AfterViewInit {\n  @Input('l10n') values?: Record<string, any> | string = {};\n\n  private originalText: string = '';\n  private sub: Subscription | undefined;\n\n  constructor(private el: ElementRef, private l10n: L10nService) {}\n\n  ngOnInit(): void {\n    this.sub = this.l10n.getStream().subscribe(() => {\n      this.updateText();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.originalText = (this.el.nativeElement.textContent || '').trim();\n    this.updateText();\n  }\n\n  private updateText(): void {\n    const translationKey = this.originalText;\n    if (!translationKey) return;\n\n    this.el.nativeElement.textContent = this.l10n.get(\n      translationKey,\n      this.values\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.sub?.unsubscribe();\n  }\n}\n"]}