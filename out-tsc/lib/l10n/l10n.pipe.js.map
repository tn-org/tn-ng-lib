{"version":3,"file":"l10n.pipe.js","sourceRoot":"","sources":["../../../src/l10n/l10n.pipe.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAOtC,IAAM,QAAQ,GAAd,MAAM,QAAQ;IAMC;IAA2B;IALvC,KAAK,GAAG,EAAE,CAAC;IACX,OAAO,GAAG,EAAE,CAAC;IACb,UAAU,GAAQ,EAAE,CAAC;IACrB,GAAG,CAAe;IAE1B,YAAoB,IAAiB,EAAU,GAAsB;QAAjD,SAAI,GAAJ,IAAI,CAAa;QAAU,QAAG,GAAH,GAAG,CAAmB;QACnE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,GAAW,EAAE,SAAc,EAAE;QACrC,MAAM,aAAa,GACjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,IAAI,GAAG,KAAK,IAAI,CAAC,OAAO,IAAI,aAAa,EAAE,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACzB,CAAC;CACF,CAAA;AA3BY,QAAQ;IAJpB,IAAI,CAAC;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,KAAK;KACZ,CAAC;qCAO0B,WAAW,EAAe,iBAAiB;GAN1D,QAAQ,CA2BpB","sourcesContent":["import { ChangeDetectorRef, Pipe, PipeTransform } from '@angular/core';\nimport { L10nService } from './l10n.service';\nimport { Subscription } from 'rxjs';\n\n@Pipe({\n  name: 'l10n',\n  pure: false,\n})\nexport class L10nPipe implements PipeTransform {\n  private value = '';\n  private lastKey = '';\n  private lastValues: any = {};\n  private sub: Subscription;\n\n  constructor(private l10n: L10nService, private cdr: ChangeDetectorRef) {\n    this.sub = this.l10n.getStream().subscribe(() => {\n      this.value = this.l10n.get(this.lastKey, this.lastValues);\n      this.cdr.markForCheck();\n    });\n  }\n\n  transform(key: string, values: any = {}): string {\n    const valuesChanged =\n      JSON.stringify(values) !== JSON.stringify(this.lastValues);\n    if (key !== this.lastKey || valuesChanged) {\n      this.lastKey = key;\n      this.lastValues = { ...values };\n      this.value = this.l10n.get(key, values);\n    }\n    return this.value;\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n}\n"]}